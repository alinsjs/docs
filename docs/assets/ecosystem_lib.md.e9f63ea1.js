import{_ as e,o as i,c as t,S as r}from"./chunks/framework.cd7b584e.js";const _=JSON.parse('{"title":"Peripheral Tools","description":"","frontmatter":{},"headers":[],"relativePath":"ecosystem/lib.md","filePath":"ecosystem/lib.md"}'),s={name:"ecosystem/lib.md"},a=r('<h1 id="peripheral-tools" tabindex="-1">Peripheral Tools <a class="header-anchor" href="#peripheral-tools" aria-label="Permalink to &quot;Peripheral Tools&quot;">​</a></h1><p>Alins is currently in its infancy, and related tool libraries are under development. If you are interested, developers are welcome to participate:</p><ol><li><a href="https://github.com/alinsjs/alins-router" target="_blank" rel="noreferrer">alins-router</a></li><li><a href="https://github.com/alinsjs/alins-ui" target="_blank" rel="noreferrer">alins-ui</a></li><li><a href="https://github.com/alinsjs/alins-v" target="_blank" rel="noreferrer">alins-v</a></li></ol><h2 id="next-version-todo" tabindex="-1">Next Version TODO <a class="header-anchor" href="#next-version-todo" aria-label="Permalink to &quot;Next Version TODO&quot;">​</a></h2><ul><li>[ ] life cycle optimization, supports use within components; + syntactic sugar $remove: el =&gt; {};</li><li>[ ] computed reconstruction; dirty flag. Optimization const b = a++;</li><li>[ ] Branch memory usage problem</li><li>[ ] For type hint</li><li>[ ] Async Data type annotation</li><li>[ ] alins-router - Official routing library (as versatile as possible and can be called directly using native js)</li><li>[ ] alins-ui - official ui library</li><li>[ ] alins-style style tag optimization processing to improve css usability, style value type declaration (can be used with reactive library and native js)</li><li>[ ] alins-style supports compatibility extensions</li><li>[ ] alins-ssr - server-side rendering (as versatile as possible and can be called directly using native js)</li><li>[ ] For supports destructuring</li><li>[ ] For Object support</li><li>[ ] source-map support</li><li>[ ] Compiler code reconstruction - Compile in two steps. The first step is jsx parsing; the second step is alins reactive; supports ssr</li><li>[ ] Runtime code refactoring - Optimize memory space usage and running time</li><li>[ ] improve testing</li></ul>',5),l=[a];function o(n,c,p,u,d,m){return i(),t("div",null,l)}const b=e(s,[["render",o]]);export{_ as __pageData,b as default};
