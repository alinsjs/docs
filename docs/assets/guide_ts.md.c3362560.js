import{_ as s,o as a,c as n,S as l}from"./chunks/framework.cd7b584e.js";const A=JSON.parse('{"title":"Typescript usage practices","description":"","frontmatter":{},"headers":[],"relativePath":"guide/ts.md","filePath":"guide/ts.md"}'),o={name:"guide/ts.md"},p=l(`<h1 id="typescript-usage-practices" tabindex="-1">Typescript usage practices <a class="header-anchor" href="#typescript-usage-practices" aria-label="Permalink to &quot;Typescript usage practices&quot;">​</a></h1><p>At present, because the IDE plugin is being planned, the temporary support for typescript types mainly depends on the IDE&#39;s support for tsx files, so some custom syntax in Alins is not well supported, but we can have some practices to avoid static checking errors of ts</p><h2 id="jsx-props" tabindex="-1">JSX. Props <a class="header-anchor" href="#jsx-props" aria-label="Permalink to &quot;JSX. Props&quot;">​</a></h2><p>When using a custom property such as &#39;$for&#39;, &#39;$if&#39; on a component, typescript throws an exception that the property does not exist, we can use JSX. Props attribute to circumvent. You can also use JSX. Children to specify the parameter type of the child element</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">$mount</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#App</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Component</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">$for</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">} </span><span style="color:#C792EA;">item</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">$item</span><span style="color:#89DDFF;">}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;{</span><span style="color:#A6ACCD;">$index</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Component</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Component</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;font-style:italic;">item</span><span style="color:#89DDFF;">}:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">JSX</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Props</span><span style="color:#89DDFF;">&lt;{</span><span style="color:#F07178;">item</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">}&gt;,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">children</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">JSX</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Children</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;{</span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">children</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="js-label-defines-variables" tabindex="-1">JS Label defines variables <a class="header-anchor" href="#js-label-defines-variables" aria-label="Permalink to &quot;JS Label defines variables&quot;">​</a></h2><p>When using &#39;$:&#39;, &#39;_:&#39;, &#39;shallow:&#39; to define variables, since ts is not recognized, you need to manually declare the variables in the tsx file, as follows</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> aaaa</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> aaaa </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="ts-ignore" tabindex="-1">ts-ignore <a class="header-anchor" href="#ts-ignore" aria-label="Permalink to &quot;ts-ignore&quot;">​</a></h2><p>For other scan errors in some TS code, you can skip them with the &#39;// @ts-ignore&#39; comment</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">ts</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">ignore</span></span>
<span class="line"><span style="color:#FFCB6B;">mount</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#App</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div>`,11),e=[p];function t(r,c,i,F,y,D){return a(),n("div",null,e)}const d=s(o,[["render",t]]);export{A as __pageData,d as default};
