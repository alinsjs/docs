import{_ as p,E as e,o as t,c,J as a,k as l,a as o,S as n}from"./chunks/framework.cd7b584e.js";const P=JSON.parse('{"title":"JSX Extension","description":"","frontmatter":{},"headers":[],"relativePath":"guide/jsx.md","filePath":"guide/jsx.md"}'),r={name:"guide/jsx.md"},D=l("h1",{id:"jsx-extension",tabindex:"-1"},[o("JSX Extension "),l("a",{class:"header-anchor",href:"#jsx-extension","aria-label":'Permalink to "JSX Extension"'},"​")],-1),F=l("p",null,"Alins uses JSX to describe the UI, but makes some extensions based on JSX to enable it to achieve more powerful capabilities. This chapter is about introducing some extensions to JSX in Alins.",-1),y=l("h2",{id:"_1-jsx-return-value",tabindex:"-1"},[o("1.JSX return value "),l("a",{class:"header-anchor",href:"#_1-jsx-return-value","aria-label":'Permalink to "1.JSX return value"'},"​")],-1),i=l("p",null,"Unlike JSX in React, which returns a React Component, in Alins, the JSX rendering function returns a native DOM element or DocumentFragment element, so we can use the following statement to add an element to the App element:",-1),C=n("",4),A=n("",3),d=n("",4),u=n("",3),h=n("",5),_=n("",4),g=n("",5),m=n("",3),b=n("",2),f=n("",3),E=n("",2);function T(v,x,S,$,j,I){const s=e("CodeBox");return t(),c("div",null,[D,F,y,i,a(s),C,a(s),A,a(s),d,a(s),u,a(s),h,a(s),_,a(s),g,a(s),m,a(s),b,a(s),f,a(s),E])}const w=p(r,[["render",T]]);export{P as __pageData,w as default};
